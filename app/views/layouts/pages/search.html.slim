doctype html
html.fill-height
  head
    title Search CampHero
    meta name="keywords" contents='Michigan Camping, travel, CampHero, camp that, campgrounds, rustic camping, rv parks, budget camping, camping sites, backcountry camping, backcountry camping, rv campgrounds'
    meta name="description" content="CampHero is the best site for finding information about Michigan Camping.  It has a complete listing of public campgrounds in Michigan, including rustic camping, RV campgrounds, and backcountry or backpacking camping sites."
    == render 'layouts/headstyles'
    link href='//api.tiles.mapbox.com/mapbox.js/v1.6.1/mapbox.css' rel='stylesheet'
    == render 'layouts/headscripts'

  body.fill-height
    == render 'layouts/modals/standardModals'
    / Generate modals for campsite forms
    - @campsites.each do |campsite|
      = render 'layouts/modals/newReviewModal', campsite:campsite
      - if user_signed_in? && current_user.lists.any?
        = render 'layouts/modals/newListModal', campsite:campsite
    = render 'layouts/modals/listSavedModal'
    = render 'layouts/modals/submitSuccessModal'

    == render 'layouts/navbar'
    input#activeTribeId type="hidden" value="0"
    #results-container.col-md-4.well.white.fill-height.remove-bottom-margin.pad-left-sm
      .result-list.fill-height
        / Time filter - doesn't work yet==========
          .row
            .input-group.col-md-6
              span.input-group-addon 
                span.glyphicon.glyphicon-calendar
                | When
              input#fromDate.form-control type="text" placeholder="Monday"
            .input-group.col-md-6
              span.input-group-addon to
              input#toDate.form-control type="text" placeholder="Monday"
        / Vibe filters======================
        .row
          .col-md-2
            #allSearchFilter.searchFilterThumbnail.thumbnail data-tribe-id="0"
              = image_tag 'icons/all120px.png', class:'img-circle img-responsive tribe-background'
            p.no-spacing.text-center
                small.no-spacing
                  small.no-spacing Show all
          - @tribes.first(3).each do |tribe|
            .col-md-2
              .searchFilterThumbnail.thumbnail style="padding:5px;" data-tribe-id=tribe.id
                = image_tag tribe.icon.url(:small), class:'img-circle img-responsive tribe-background'
              p.no-spacing.text-center
                  small.no-spacing
                    small.no-spacing = tribe.vibe
          .col-md-12
            hr

        / If no results ===============
        - if @campsites.blank?
          .row.results
            .col-md-12
              .panel.panel-warning
                .panel-heading Super-frick!  No campsites matched your search.
                .panel-body
                  ul
                    li Maybe my advanced computer brain didn't recognize the place you entered.
                    li Maybe the place you entered isn't in Michigan?  Right now, Michigan is the only territory under CampHero's protection.
                    li Maybe you did nothing wrong and I just messed.  Even heroes make mistakes.  If so, I am epicly sorry.  Please consider leaving feedback so my techno-nerd sidekicks can discover and fix this nefarious problem.

        / Results ======================
        - else
          .row.results
            - @campsites.each do |campsite|
              = render "searchResult", campsite:campsite

        / Legal boilerplate =============================================
        .row
          p.col-md-12
            small.subtle-text 
              | CampHero &copy 2014&nbsp;
              = link_to 'Terms', terms_path

    / MapBox ===============================
    .col-md-8.mapColumn.fill-height.no-spacing
      script src='https://api.tiles.mapbox.com/mapbox.js/v1.6.1/mapbox.js'
      / Map
      #resultsMap
      / Reset button
      #map-ui style="position: absolute; top: 60px; left: 5px; z-index: 100; margin-left:5px; padding-left:5px;"
        button#searchReset.thumbnail.add-tooltip data-toggle="tooltip" type="submit" title="Search this area" data-placement="right" style="background:rgba(0.1, 0.1, 0.1, .6);" 
          span.glyphicon.glyphicon-repeat style="font-size:40px; color:#666666;"
      - if @campsites.size >= 50
        #map-notice style="position:absolute; top: 60px; right:5px; z-index:100;"
          .well.black.white-text 
            small
              | Your mighty search resulted in more than 50 campsites.
              br
              | Narrow your search-area to see more campsites.

    == render 'layouts/bottomScripts'

  javascript:
    highlightSearchThumbnail($('#allSearchFilter'));
    // Create the initial map
    var map = L.mapbox.map("resultsMap", "campawesome.h5d0p7ea").setView(gon.center, gon.zoom);
    map.zoomControl.setPosition('bottomright'); // move the map zoom control
    map.markerLayer.setGeoJSON(gon.geoJson); // set the marker layer
    var popupContent =  '<h2>' + feature.properties.title + '</h2>';
    marker.bindPopup(popupContent,{
            closeButton: false,
            minWidth: 320
        });

  javascript:
    // Apply hover effect
    $(".searchFilterThumbnail").hover( function(){
      searchHoverEffect( $(this) );
    });
    $('.add-tooltip').tooltip();

    // Set click behaviors for filter
    $(".searchFilterThumbnail").click( function(){
      highlightSearchThumbnail($(this));
      var filterId = $(this).data('tribe-id');
      filterSearchResults(filterId); // Filter the list of search results
      filterSearchMarkers(map, filterId); // Filter the search markers
    });
    

  javascript:
    $(document).ready( function() {
      $('#searchReset').hide();
      $('#searchReset').tooltip('hide');
      $('#searchReset').click( function() {
        //alert('clicked reset button...');
        var currentCenter = map.getCenter(); // Current center of the map as Leaflet LatLng
        //alert("...Got center:"+currentCenter);
        var southWest = map.getBounds().getSouthWest(); // Returns the SW corner as LatLng
        //alert("...Got SW corner:"+southWest);
        var distanceInMeters = currentCenter.distanceTo(southWest); // Distance to edge of map
        //alert("Distance in meters:"+distanceInMeters);
        var distanceInMiles = distanceInMeters * .000621371;
        //alert("Distance in miles:"+distanceInMiles);
        var centerString = currentCenter['lat'].toString()+', '+currentCenter['lng'].toString(); // Reformat coordinates
        //alert("centerString:" +centerString);
        var params = $.param( { distance:distanceInMiles, keywords:centerString }); // HTML parameters for request
        //alert("params: "+ params);
        var url = "http://localhost:3000/campsites/search.json?" + params; // The request url
        var stateObj = { search: "search" }; // Obj for replaceState function (see next line)
        history.replaceState(stateObj, "", "search.html?"+params); // Add the proper url to the browser
        //alert("url: "+url);

        // Make ajax request for campsite JSON
        $.getJSON(url, {})
          .done( function(data) {
            //alert(data);
            $("#searchReset").hide(); // Hide the reset button

            map.markerLayer.setGeoJSON(data); //Reset map markers
            resetSearchList(params).done( function () { // Reset search list
              filterSearchResults( $('#activeTribeId').val() ); // Refilter search list
            }); 

            filterId = $('#activeTribeId').val(); // Get active tribe Filter
            filterSearchMarkers(map, filterId); // // Refilter map markers

          })
        ;

      });
    });
    map.on( "moveend", function(e) { 
      $('#searchReset').show();
      $('#searchReset').tooltip('show');

    });
    map.on( "zoomend", function(e) {
      $('#searchReset').show();
      $('#searchReset').tooltip('show');
    });

  javascript:
    function filterSearchMarkers(map, filterId) {
      map.featureLayer.setFilter(function(f) { 
        if (filterId != 0) {
          for (x in f.properties['tribes']) {
            if (f.properties['tribes'][x] == filterId) {
              return true;
            }
          }
        } else {
          map.featureLayer.setFilter(function(f) { 
            return true; 
          });
        }
      });
      //return false;
    }

  javascript:
    // takes search parameters coded into html and resets the list of results
    function resetSearchList(params) {
      $('.results').empty(); // Clear the result list
      $('.results').html("<h3 class='greenify text-center'> Fetching new results...<br>Activating superspeed...<br>Defeating forces of evil... <br>Deploying X-Ray vision...</h3>");

      // Make an ajax call to get the new html
      var targetUrl = "http://localhost:3000/campsites/resetSearch.html?"+params;
      //alert('started fetching new search list...');
      $.get( targetUrl, function( newHtml ) {
        //alert('completed get for new html...');
        $('.results').empty();
        $( ".results" ).html( newHtml ); // Add the new results
      });

    }

  javascript:
    /*function resetSearchList(geoJson) {
      $('.results').empty(); // Clear the result list
      /*newResults = $('<div/>').addClass('newResult');
      for (campsite in geoJson) {
        //result_div = $('<div/>').addClass('searchResult').data-tribes(campsite['properties']['tribeIds']);
        //leftCol = $('<div/>').addClass('col-md-2');
        leftCol = $('<div/>').addClass('col-md-2');
        rightCol = $('<div/>').addClass('col-md-10');
        link = $('<a/>').attr('href', geoJson[campsite]['properties']['url']);
        smallSpan = $('<small/>');
        heading = $('<p/>').addClass('lead').text(geoJson[campsite]['properties']['title']);
        smallSpan.append(heading);
        link.append(smallSpan);
        newResults = newResults.append(link);
      }

      //$('.results').html(newResults);
      $('#template').jqote(geoJson).appendTo($('.results'));

    }*/

    /* Apply the initial filter, if any
    if (gon.initTribe) { 
      var filterId = gon.initTribe;
    } else { 
      var filterId = 0; 
    }
    $('.searchFilterThumbnail').each( function() {
      if ( $(this).data('tribe-id') == filterId) {
        highlightSearchFilter( $(this) );
      }
    });
    /*function applyFilter(tribalId) {
      $(".browseResult").hide();
      if (tribalId == 0) {
        $(".browseResult").show();
      } else {
        $(".browseResult").each( function () {
          var targetResult = $(this);
          var tribeIds = targetResult.data("tribes"); // gets tribe ids for the campsite
          for (x in tribeIds) {
            if (tribeIds[x] == tribalId) { targetResult.show(); }
          }  
            });
          }
        }*/
